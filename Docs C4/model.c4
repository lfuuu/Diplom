model {

    admin = actor "Администратор узла"
    abonent = actor "Абонент"

    phoneOperator = system "PhoneOperator" {
        acc = container "Тарификатор звонков" {
            radiusServer = component "RadiusServer"
            cdrRepo = component "cdrRepo"
            radiusServer -> cdrRepo 'Сохранение звонка'
            cdrRepo -> db 'Сохранение CDR '
        }
        auth = container "Маршрутизатор звонков"{
            radiusServer = component "RadiusServer"
            clientRepo = component "clientRepo"
            callsRepo = component "callsRepo"
            radiusServer -> clientRepo 'Проверка баланса'
            radiusServer -> callsRepo 'Запись данных звонков'
            clientRepo -> db 'Баланс Пакетов'
            callsRepo -> db 'Тарификация звонка'
        }
        db =  database "Хранилище" {
         technology "postgres"
        }

        lkApi = backend {
            httpServer = component 'httpServer'
            balanceClientApi = component 'Сервис баланса'
            callsClientApi = component 'Сервис звонков'
            httpServer -> balanceClientApi ''
            httpServer -> callsClientApi ''
            balanceClientApi -> db ''
            callsClientApi -> db ''
        }       
        lkFront = frontend {
            balanceClientPage = component 'Страница баланса'
            callsClientPage = component 'Отчет по звонкам'
            callsClientPage -> lkApi.httpServer ''
            balanceClientPage -> lkApi.httpServer ''

        }

        adminApi = backend{
            httpServer = component 'httpServer'
            serviceCallsApi = component 'Сервис звонков'
            serviceUsersApi = component 'Сервис пользователей'
            serviceOpsApi = component 'Сервис операторов'
            serviceCallsApi -> db ''
            serviceUsersApi -> db ''
            serviceOpsApi -> db ''
            httpServer -> serviceCallsApi
            httpServer -> serviceUsersApi
            httpServer -> serviceOpsApi
        }        
        adminFront = frontend{
            usersPage = component 'Страница с пользователями узла'
            opsPage = component 'Страница со внешними операторами(аплинки)'
            userForm = component 'Настройки пользователя'
            opForm = component 'Настройки оператора'
            usersPage -> adminApi.httpServer ''
            opsPage -> adminApi.httpServer ''
            userForm -> adminApi.httpServer ''
            opForm -> adminApi.httpServer ''
        }

        lkApi -> db "управляет настройками, статистикой"

        adminFront -> adminApi "Запросы к Апи" {
           technology 'http-RestAPi/port: 80'    
        }


        acc -> db "Сохраняет cdr"
        auth -> db "Вычисляет маршрут/проверяет баланс"
    }

    openSwitch = externalSystem "Телефонный коммутатор"
    accounting = externalSystem "Бухгалтерия"


    openSwitch -> phoneOperator.auth "Авторизирует звонок" {
        technology 'radius/port: 1812'
    }
    openSwitch -> phoneOperator.acc.radiusServer "Тарифицирет звонок звонок" {
        technology 'radius/port: 1813'
    }

    accounting -> phoneOperator.db "Учет расходов и доходов" {
        technology 'postgres/port: 5432'
    }

    abonent -> phoneOperator.lkFront "Пользуется Личным кабинетом"
    admin -> phoneOperator.adminFront "Управляет узлом связи"



}